# Generated by rspec-sinatra. (2016-01-14 10:02:32 +0000)

ENV['RACK_ENV'] = 'test'

require File.join(File.dirname(__FILE__), '..', './app/app.rb')
require 'database_cleaner'
require 'capybara'
require 'capybara/rspec'
require 'rspec'
require './app/models/peep.rb'
require './app/models/user.rb'
require_relative 'web_helper'


Capybara.app = Chitter
# hmm - should be generated by `rspec --init` directly rather than copy paste ...

# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause this
# file to always be loaded, without a need to explicitly require it in any files.
## Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need it.
## The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
## See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|

 # Everything in this block runs once before all the tests run
 config.before(:suite) do
   DatabaseCleaner.strategy = :transaction
   DatabaseCleaner.clean_with(:truncation)
 end

 # Everything in this block runs once before each individual test
 config.before(:each) do
   DatabaseCleaner.start
 end

 # Everything in this block runs once after each individual test
 config.after(:each) do
   DatabaseCleaner.clean
 end

 config.include Capybara::DSL
 # rspec-expectations config goes here. You can use an alternate
 # assertion/expectation library such as wrong or the stdlib/minitest
 # assertions if you prefer.
 config.expect_with :rspec do |expectations|
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
 end

 # rspec-mocks config goes here. You can use an alternate test double
 # library (such as bogus or mocha) by changing the `mock_with` option here.
 config.mock_with :rspec do |mocks|
   # Prevents you from mocking or stubbing a method that does not exist on
   # a real object. This is generally recommended, and will default to
   # `true` in RSpec 4.
   mocks.verify_partial_doubles = true
 end

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
 # These two settings work together to allow you to limit a spec run
 # to individual examples or groups you care about by tagging them with
 # `:focus` metadata. When nothing is tagged with `:focus`, all examples
 # get run.
 config.filter_run :focus
 config.run_all_when_everything_filtered = true

 # Limits the available syntax to the non-monkey patched syntax that is recommended.
 # For more details, see:
 #   - http://myronmars.to/n/dev-blog/2012/06/rspecs-new-expectation-syntax
 #   - http://teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
 #   - http://myronmars.to/n/dev-blog/2014/05/notable-changes-in-rspec-3#new__config_option_to_disable_rspeccore_monkey_patching
 config.disable_monkey_patching!


 config.warnings = true


 if config.files_to_run.one?
    config.default_formatter = 'doc'
 end


 config.profile_examples = 10


 config.order = :random


 Kernel.srand config.seed
=end
end
